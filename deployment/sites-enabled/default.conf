upstream uwsgi {
  server uwsgi:8080;
}

upstream flower {
  server flower:5555;
}

upstream rabbitmq {
  server rabbitmq:15672;
}

upstream graphql {
  server graphql:8088;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Load your ssl certificates here
    # ssl_certificate                 /etc/nginx/ssl-bundle.crt;
    # ssl_certificate_key             /etc/nginx/peelj_co.key;
    
    ssl_stapling                    on;

    ssl_stapling_verify             on;


    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header                      Strict-Transport-Security "max-age=63072000" always;

    gzip                            on;
    gzip_min_length                 860;
    gzip_comp_level                 5;
    gzip_proxied                    expired no-cache no-store private auth;
    gzip_types                      text/plain application/xml application/x-javascript text/xml text/css application/json;
    gzip_disable                    "MSIE [1-6].(?!.*SV1)";

    error_log                       /var/log/nginx/error.log;

    charset                         utf-8;

    client_max_body_size            500M;
    proxy_connect_timeout           700;
    proxy_send_timeout              700;
    proxy_read_timeout              700;
    send_timeout                    700;

    location ~ (\.php|.aspx|.asp|myadmin) {
        return 404;
    }

    location /media  {
        alias /home/web/media;
        expires 21d; # cache for 71 days
    }

    location /static {
        alias /home/web/static;
        expires 21d; # cache for 21 days
    }

    #Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  uwsgi;
        include     uwsgi_params;
    }

  # Celery Flower
  location ~ ^/flower/? {
      rewrite ^/flower/?(.*)$ /$1 break;
      # proxy_pass http://unix:/tmp/flower.sock:/;
      proxy_pass http://flower;
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_http_version 1.1;
  }

  # RabbitMQ API
  location /rabbitmq/api/ {
      rewrite ^ $request_uri;
      rewrite ^/rabbitmq/api/(.*) /api/$1 break;
      return 400;
      proxy_pass http://rabbitmq$uri;
      proxy_buffering                    off;
      proxy_set_header Host              $http_host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
  }
  # RabbitNQ entrypoint
  location /rabbitmq/ {
      proxy_pass http://rabbitmq/;
      proxy_buffering                    off;
      proxy_set_header Host              $http_host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
  }

  # GraphQL
  location /graphql {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-NginX-Proxy true;
      proxy_pass http://graphql;
      proxy_ssl_session_reuse off;
      proxy_set_header Host $http_host;
      proxy_cache_bypass $http_upgrade;
      proxy_redirect off;
  }
}
